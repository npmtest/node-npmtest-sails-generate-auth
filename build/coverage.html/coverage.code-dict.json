{"/home/travis/build/npmtest/node-npmtest-sails-generate-auth/test.js":"/* istanbul instrument in package npmtest_sails_generate_auth */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-generate-auth/lib.npmtest_sails_generate_auth.js":"/* istanbul instrument in package npmtest_sails_generate_auth */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sails_generate_auth = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sails_generate_auth = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-generate-auth/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sails-generate-auth && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sails_generate_auth */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sails_generate_auth\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sails_generate_auth.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sails_generate_auth.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sails_generate_auth.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sails_generate_auth.__dirname + '/lib.npmtest_sails_generate_auth.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-generate-auth/node_modules/sails-generate-auth/lib/index.js":"/**\n * sails-generate-auth\n *\n * Usage:\n * `sails generate auth`\n *\n * @type {Object}\n */\nmodule.exports = {\n\n  templatesDirectory: require('path').resolve(__dirname,'../templates'),\n\n  before: require('./before'),\n\n  targets: {\n    './': {\n      exec: function (scope, cb) {\n        console.log('Running generator (sails-generate-auth) @ `'+scope.rootPath+'`...');\n        cb();\n      }\n    },\n\n    // Authentication controller\n    './api/controllers/AuthController.js': { template: 'api/controllers/AuthController.js' },\n\n    // User model\n    './api/models/User.js': { template: 'api/models/User.js' },\n\n    // Passport model\n    './api/models/Passport.js': { template: 'api/models/Passport.js' },\n\n    // Passport middleware\n    './api/policies/passport.js': { template: 'api/policies/passport.js' },\n\n    // Bearer Authentication Policy\n    './api/policies/bearerAuth.js': { template: 'api/policies/bearerAuth.js' },\n\n    // Passport wrapper\n    './api/services/passport.js': { template: 'api/services/passport.js' },\n\n    // Authentication protocols\n    './api/services/protocols': { folder: {} },\n    './api/services/protocols/index.js': { template: 'api/services/protocols/index.js' },\n    './api/services/protocols/local.js': { template: 'api/services/protocols/local.js' },\n    './api/services/protocols/oauth.js': { template: 'api/services/protocols/oauth.js' },\n    './api/services/protocols/oauth2.js': { template: 'api/services/protocols/oauth2.js' },\n    './api/services/protocols/openid.js': { template: 'api/services/protocols/openid.js' },\n    './api/services/protocols/bearer.js': { template: 'api/services/protocols/bearer.js' },\n    './api/services/protocols/cas.js': { template: 'api/services/protocols/cas.js' },\n\n    // Passport configuration\n    './config/passport.js': { template: 'config/passport.js' },\n\n    // Authentication views\n    './views/auth/login.ejs': { copy: 'views/auth/login.ejs' },\n    './views/auth/register.ejs': { copy: 'views/auth/register.ejs' }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sails-generate-auth/node_modules/sails-generate-auth/lib/before.js":"/**\n * Module dependencies\n */\n\nvar util = require('util')\n  , _ = require('lodash');\n\n// Make _.defaults recursive\n_.defaults = require('merge-defaults');\n\n\n\n\n/**\n * This `before` function is run before generating targets.\n * Validate, configure defaults, get extra dependencies, etc.\n *\n * @param  {Object} scope\n * @param  {Function} cb    [callback]\n */\n\nmodule.exports = function(scope, cb) {\n\n  //\n  // scope.args are the raw command line arguments.\n  //\n  // e.g. if you run:\n  // sails generate controlller user find create update\n  // then:\n  // scope.args = ['user', 'find', 'create', 'update']\n  //\n\n  _.defaults(scope, {\n    // foo: scope.args[0]\n  });\n\n\n\n  //\n  // Validate custom scope variables which\n  // are required by this generator.\n  //\n\n  if ( !scope.rootPath ) {\n    return cb(new Error(\n      'Missing scope variable: `rootPath`\\n' +\n      'Please make sure it is specified and try again.'\n    ));\n  }\n\n\n  //\n  // Determine default values based on the\n  // available scope.\n  //\n\n  _.defaults(scope, {\n    currentTime: new Date()\n  });\n\n\n\n  //\n  // Take multiple \"passes\" if necessary.\n  //\n\n  _.defaults(scope, {\n    rootPath: scope.rootPath\n  });\n\n\n\n  //\n  // Trigger callback with no error to proceed.\n  //\n\n  cb();\n};\n","/home/travis/build/npmtest/node-npmtest-sails-generate-auth/node_modules/sails-generate-auth/templates/config/passport.js":"/**\n * Passport configuration\n *\n * This is the configuration for your Passport.js setup and where you\n * define the authentication strategies you want your application to employ.\n *\n * I have tested the service with all of the providers listed below - if you\n * come across a provider that for some reason doesn't work, feel free to open\n * an issue on GitHub.\n *\n * Also, authentication scopes can be set through the `scope` property.\n *\n * For more information on the available providers, check out:\n * http://passportjs.org/guide/providers/\n */\n\nmodule.exports.passport = {\n  local: {\n    strategy: require('passport-local').Strategy\n  },\n\n  bearer: {\n    strategy: require('passport-http-bearer').Strategy\n  },\n\n  twitter: {\n    name: 'Twitter',\n    protocol: 'oauth',\n    strategy: require('passport-twitter').Strategy,\n    options: {\n      consumerKey: 'your-consumer-key',\n      consumerSecret: 'your-consumer-secret'\n    }\n  },\n\n  github: {\n    name: 'GitHub',\n    protocol: 'oauth2',\n    strategy: require('passport-github').Strategy,\n    options: {\n      clientID: 'your-client-id',\n      clientSecret: 'your-client-secret'\n    }\n  },\n\n  facebook: {\n    name: 'Facebook',\n    protocol: 'oauth2',\n    strategy: require('passport-facebook').Strategy,\n    options: {\n      clientID: 'your-client-id',\n      clientSecret: 'your-client-secret',\n      scope: ['email'] /* email is necessary for login behavior */\n    }\n  },\n\n  google: {\n    name: 'Google',\n    protocol: 'oauth2',\n    strategy: require('passport-google-oauth').OAuth2Strategy,\n    options: {\n      clientID: 'your-client-id',\n      clientSecret: 'your-client-secret'\n    }\n  },\n\n  cas: {\n    name: 'CAS',\n    protocol: 'cas',\n    strategy: require('passport-cas').Strategy,\n    options: {\n      ssoBaseURL: 'http://your-cas-url',\n      serverBaseURL: 'http://localhost:1337',\n      serviceURL: 'http://localhost:1337/auth/cas/callback'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sails-generate-auth/node_modules/sails-generate-auth/templates/api/controllers/AuthController.js":"/**\n * Authentication Controller\n *\n * This is merely meant as an example of how your Authentication controller\n * should look. It currently includes the minimum amount of functionality for\n * the basics of Passport.js to work.\n */\nvar AuthController = {\n  /**\n   * Render the login page\n   *\n   * The login form itself is just a simple HTML form:\n   *\n      <form role=\"form\" action=\"/auth/local\" method=\"post\">\n        <input type=\"text\" name=\"identifier\" placeholder=\"Username or Email\">\n        <input type=\"password\" name=\"password\" placeholder=\"Password\">\n        <button type=\"submit\">Sign in</button>\n      </form>\n   *\n   * You could optionally add CSRF-protection as outlined in the documentation:\n   * http://sailsjs.org/#!documentation/config.csrf\n   *\n   * A simple example of automatically listing all available providers in a\n   * Handlebars template would look like this:\n   *\n      {{#each providers}}\n        <a href=\"/auth/{{slug}}\" role=\"button\">{{name}}</a>\n      {{/each}}\n   *\n   * @param {Object} req\n   * @param {Object} res\n   */\n  login: function (req, res) {\n    var strategies = sails.config.passport\n      , providers  = {};\n\n    // Get a list of available providers for use in your templates.\n    Object.keys(strategies).forEach(function (key) {\n      if (key === 'local') {\n        return;\n      }\n\n      providers[key] = {\n        name: strategies[key].name\n      , slug: key\n      };\n    });\n\n    // Render the `auth/login.ext` view\n    res.view({\n      providers : providers\n    , errors    : req.flash('error')\n    });\n  },\n\n  /**\n   * Log out a user and return them to the homepage\n   *\n   * Passport exposes a logout() function on req (also aliased as logOut()) that\n   * can be called from any route handler which needs to terminate a login\n   * session. Invoking logout() will remove the req.user property and clear the\n   * login session (if any).\n   *\n   * For more information on logging out users in Passport.js, check out:\n   * http://passportjs.org/guide/logout/\n   *\n   * @param {Object} req\n   * @param {Object} res\n   */\n  logout: function (req, res) {\n    req.logout();\n    \n    // mark the user as logged out for auth purposes\n    req.session.authenticated = false;\n    \n    res.redirect('/');\n  },\n\n  /**\n   * Render the registration page\n   *\n   * Just like the login form, the registration form is just simple HTML:\n   *\n      <form role=\"form\" action=\"/auth/local/register\" method=\"post\">\n        <input type=\"text\" name=\"username\" placeholder=\"Username\">\n        <input type=\"text\" name=\"email\" placeholder=\"Email\">\n        <input type=\"password\" name=\"password\" placeholder=\"Password\">\n        <button type=\"submit\">Sign up</button>\n      </form>\n   *\n   * @param {Object} req\n   * @param {Object} res\n   */\n  register: function (req, res) {\n    res.view({\n      errors: req.flash('error')\n    });\n  },\n\n  /**\n   * Create a third-party authentication endpoint\n   *\n   * @param {Object} req\n   * @param {Object} res\n   */\n  provider: function (req, res) {\n    passport.endpoint(req, res);\n  },\n\n  /**\n   * Create a authentication callback endpoint\n   *\n   * This endpoint handles everything related to creating and verifying Pass-\n   * ports and users, both locally and from third-aprty providers.\n   *\n   * Passport exposes a login() function on req (also aliased as logIn()) that\n   * can be used to establish a login session. When the login operation\n   * completes, user will be assigned to req.user.\n   *\n   * For more information on logging in users in Passport.js, check out:\n   * http://passportjs.org/guide/login/\n   *\n   * @param {Object} req\n   * @param {Object} res\n   */\n  callback: function (req, res) {\n    function tryAgain (err) {\n\n      // Only certain error messages are returned via req.flash('error', someError)\n      // because we shouldn't expose internal authorization errors to the user.\n      // We do return a generic error and the original request body.\n      var flashError = req.flash('error')[0];\n\n      if (err && !flashError ) {\n        req.flash('error', 'Error.Passport.Generic');\n      } else if (flashError) {\n        req.flash('error', flashError);\n      }\n      req.flash('form', req.body);\n\n      // If an error was thrown, redirect the user to the\n      // login, register or disconnect action initiator view.\n      // These views should take care of rendering the error messages.\n      var action = req.param('action');\n\n      switch (action) {\n        case 'register':\n          res.redirect('/register');\n          break;\n        case 'disconnect':\n          res.redirect('back');\n          break;\n        default:\n          res.redirect('/login');\n      }\n    }\n\n    passport.callback(req, res, function (err, user, challenges, statuses) {\n      if (err || !user) {\n        return tryAgain(challenges);\n      }\n\n      req.login(user, function (err) {\n        if (err) {\n          return tryAgain(err);\n        }\n        \n        // Mark the session as authenticated to work with default Sails sessionAuth.js policy\n        req.session.authenticated = true\n        \n        // Upon successful login, send the user to the homepage were req.user\n        // will be available.\n        res.redirect('/');\n      });\n    });\n  },\n\n  /**\n   * Disconnect a passport from a user\n   *\n   * @param {Object} req\n   * @param {Object} res\n   */\n  disconnect: function (req, res) {\n    passport.disconnect(req, res);\n  }\n};\n\nmodule.exports = AuthController;\n","/home/travis/build/npmtest/node-npmtest-sails-generate-auth/node_modules/sails-generate-auth/templates/api/models/Passport.js":"var bcrypt = require('bcryptjs');\n\n/**\n * Hash a passport password.\n *\n * @param {Object}   password\n * @param {Function} next\n */\nfunction hashPassword (passport, next) {\n  if (passport.password) {\n    bcrypt.hash(passport.password, 10, function (err, hash) {\n      passport.password = hash;\n      next(err, passport);\n    });\n  } else {\n    next(null, passport);\n  }\n}\n\n/**\n * Passport Model\n *\n * The Passport model handles associating authenticators with users. An authen-\n * ticator can be either local (password) or third-party (provider). A single\n * user can have multiple passports, allowing them to connect and use several\n * third-party strategies in optional conjunction with a password.\n *\n * Since an application will only need to authenticate a user once per session,\n * it makes sense to encapsulate the data specific to the authentication process\n * in a model of its own. This allows us to keep the session itself as light-\n * weight as possible as the application only needs to serialize and deserialize\n * the user, but not the authentication data, to and from the session.\n */\nvar Passport = {\n  attributes: {\n    // Required field: Protocol\n    //\n    // Defines the protocol to use for the passport. When employing the local\n    // strategy, the protocol will be set to 'local'. When using a third-party\n    // strategy, the protocol will be set to the standard used by the third-\n    // party service (e.g. 'oauth', 'oauth2', 'openid').\n    protocol: { type: 'alphanumeric', required: true },\n\n    // Local fields: Password, Access Token\n    //\n    // When the local strategy is employed, a password will be used as the\n    // means of authentication along with either a username or an email.\n    //\n    // accessToken is used to authenticate API requests. it is generated when a \n    // passport (with protocol 'local') is created for a user. \n    password    : { type: 'string', minLength: 8 },\n    accessToken : { type: 'string' },\n\n    // Provider fields: Provider, identifer and tokens\n    //\n    // \"provider\" is the name of the third-party auth service in all lowercase\n    // (e.g. 'github', 'facebook') whereas \"identifier\" is a provider-specific\n    // key, typically an ID. These two fields are used as the main means of\n    // identifying a passport and tying it to a local user.\n    //\n    // The \"tokens\" field is a JSON object used in the case of the OAuth stan-\n    // dards. When using OAuth 1.0, a `token` as well as a `tokenSecret` will\n    // be issued by the provider. In the case of OAuth 2.0, an `accessToken`\n    // and a `refreshToken` will be issued.\n    provider   : { type: 'alphanumericdashed' },\n    identifier : { type: 'string' },\n    tokens     : { type: 'json' },\n\n    // Associations\n    //\n    // Associate every passport with one, and only one, user. This requires an\n    // adapter compatible with associations.\n    //\n    // For more information on associations in Waterline, check out:\n    // https://github.com/balderdashy/waterline\n    user: { model: 'User', required: true },\n\n    /**\n     * Validate password used by the local strategy.\n     *\n     * @param {string}   password The password to validate\n     * @param {Function} next\n     */\n    validatePassword: function (password, next) {\n      bcrypt.compare(password, this.password, next);\n    }\n\n  },\n\n  /**\n   * Callback to be run before creating a Passport.\n   *\n   * @param {Object}   passport The soon-to-be-created Passport\n   * @param {Function} next\n   */\n  beforeCreate: function (passport, next) {\n    hashPassword(passport, next);\n  },\n\n  /**\n   * Callback to be run before updating a Passport.\n   *\n   * @param {Object}   passport Values to be updated\n   * @param {Function} next\n   */\n  beforeUpdate: function (passport, next) {\n    hashPassword(passport, next);\n  }\n};\n\nmodule.exports = Passport;\n","/home/travis/build/npmtest/node-npmtest-sails-generate-auth/node_modules/sails-generate-auth/templates/api/models/User.js":"var User = {\n  // Enforce model schema in the case of schemaless databases\n  schema: true,\n\n  attributes: {\n    username  : { type: 'string', unique: true },\n    email     : { type: 'email',  unique: true },\n    passports : { collection: 'Passport', via: 'user' }\n  }\n};\n\nmodule.exports = User;\n","/home/travis/build/npmtest/node-npmtest-sails-generate-auth/node_modules/sails-generate-auth/templates/api/policies/bearerAuth.js":"/**\n * bearerAuth Policy\n * \n * Policy for authorizing API requests. The request is authenticated if the \n * it contains the accessToken in header, body or as a query param.\n * Unlike other strategies bearer doesn't require a session.\n * Add this policy (in config/policies.js) to controller actions which are not\n * accessed through a session. For example: API request from another client\n *\n * @param {Object}   req\n * @param {Object}   res\n * @param {Function} next\n */\n\nmodule.exports = function (req, res, next) {\n\n  return passport.authenticate('bearer', { session: false })(req, res, next);\n  \n};\n","/home/travis/build/npmtest/node-npmtest-sails-generate-auth/node_modules/sails-generate-auth/templates/api/policies/passport.js":"/**\n * Passport Middleware\n *\n * Policy for Sails that initializes Passport.js and as well as its built-in\n * session support.\n *\n * In a typical web application, the credentials used to authenticate a user\n * will only be transmitted during the login request. If authentication\n * succeeds, a session will be established and maintained via a cookie set in\n * the user's browser.\n *\n * Each subsequent request will not contain credentials, but rather the unique\n * cookie that identifies the session. In order to support login sessions,\n * Passport will serialize and deserialize user instances to and from the\n * session.\n *\n * For more information on the Passport.js middleware, check out:\n * http://passportjs.org/guide/configure/\n *\n * @param {Object}   req\n * @param {Object}   res\n * @param {Function} next\n */\nmodule.exports = function (req, res, next) {\n  // Initialize Passport\n  passport.initialize()(req, res, function () {\n    // Use the built-in sessions\n    passport.session()(req, res, function () {\n      // Make the user available throughout the frontend\n      res.locals.user = req.user;\n\n      next();\n    });\n  });\n};\n"}